#aur pkglist &> /dev/null &
set -l baseCommands build chroot depends fetch format graph pkglist query repo repo-filter search srcver sync vercmp view
set -l customCommands remove install
set -l subCommands $baseCommands $customCommands

complete -c aur -f -n "not __fish_seen_subcommand_from $subCommands" -a "$subCommands"

# aur-sync
# Autogenerated from man page /usr/share/man/man1/aur-sync.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l continue -d 'Do not download package files'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l ignore -d 'Ignore a package upgrade'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l ignore-file -d 'Ignore package upgrades listed in R FILE '
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s k -l keep-going -d 'Keep going until  NUM packages fail to build . RB ( "ninja -k" )'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l noview -l no-view -d 'Do not present build files for inspection'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s u -l upgrades -d 'Update all obsolete AUR packages in a local repository'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l optdepends -d 'Take  optdepends into account when resolving dependencies'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l nocheck -l no-check -d 'Do not handle  checkdepends '
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l nograph -l no-graph -d 'Do not verify the AUR dependency graph with  aur-graph (1)'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l nover -l no-ver -d 'Disable version checking for packages'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l nover-argv -l no-ver-argv -d 'Disable version checking for packages specified on the command line  or  upgrade  candidates  from  --upgrades.  Version checks for package dependencies remain enabled.'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l noprovides -l no-provides -d 'Do not take virtual dependencies '
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l provides-from -d 'Only take specified (comma-separated) pacman(8) repositories into account when checking virtual dependencies. If the same package is provided in multiple repositories, ordering is ignored (for example,  --provides-from=a,b  is equivalent to --provides-from=b,a) and dependencies are installed according to the order defined in pacman.conf(5).  Packages specified  on  the  command-line  or  available  as  an  upgrade (aur-sync -u), are taken as targets regardless of this setting.'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s d -l database -d 'Use the  NAME repository'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l root -d 'The location of the repository root'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l ff -d 'Merge new AUR commits with  "git-merge --ff" for all repositories'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l rebase -d 'Merge new AUR commits with  "git-rebase" for all repositories'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l reset -d 'Discard local changes and commits with  "git-reset" for all repositories'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s c -l chroot -d 'Build packages in a systemd-nspawn container. RB ( "aur build -c" ) '
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s f -l force -d 'Continue the build process if a package with the same name exists'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s n -l noconfirm -l no-confirm -d 'Do not wait for user input when installing or removing build dependencies'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s o -l nobuild -l no-build -d 'Print target packages and their paths instead of building them'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l pkgver -d 'Run  "makepkg -od --noprepare" before the build process'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s r -l rmdeps -l rm-deps -d 'Remove dependencies installed by makepkg. RB ( "aur build -r" ) '
complete -c aur -f -n "__fish_seen_subcommand_from sync" -s S -l sign -l gpg-sign -d 'Sign built packages with  gpg (1). RB ( "aur build -S" ) '
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l makepkg-conf -d 'The  makepkg. conf (5) file for chroot and  makepkg (8) operations'
complete -c aur -f -n "__fish_seen_subcommand_from sync" -l pacman-conf -d 'The pacman. conf (5) file for chroot and local repository operations'

complete -c aur -f -n '__fish_seen_subcommand_from sync'  -a (cat '/home/still/.cache/aurutils/pkglist/packages' | tr '\n' ' ')

# aur-build
# Autogenerated from man page /usr/share/man/man1/aur-build.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from build" -s a -l arg-file -d 'A text file describing directories containing a PKGBUILD relative to the curr…'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s c -l chroot -d 'Build packages inside a  systemd-nspawn (1) container with  aur-chroot '
complete -c aur -f -n "__fish_seen_subcommand_from build" -s d -l database -d 'The name of the  pacman (8) database'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l root -d 'The root directory for the repository'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s f -l force -d 'Continue the build process if a package with the same name is found'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s S -l sign -l gpg-sign -d 'Sign built packages and the database . RB ( "repo-add -s" ) with  gpg (1)'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l pkgver -d 'Run  "makepkg -od" before checking existing packages, effectively running the…'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l makepkg-conf -d 'The  makepkg. conf (5) file used for  makepkg (8) operations'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l pacman-conf -d 'The file used for retrieving local repositories '
complete -c aur -f -n "__fish_seen_subcommand_from build" -l no-sync -d 'Do not sync the local repository after building'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l results -d 'Write colon-delimited output in the following form to R FILE :'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l nocheck -d 'Do not run the check() function in the PKGBUILD'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s n -l noconfirm -l no-confirm -d 'Do not wait for user input. RB ( makepkg " " --noconfirm ) '
complete -c aur -f -n "__fish_seen_subcommand_from build" -s r -l rmdeps -d 'Remove dependencies installed by makepkg. RB ( makepkg " " --rmdeps ) '
complete -c aur -f -n "__fish_seen_subcommand_from build" -s s -l syncdeps -d 'Install missing dependencies using  pacman . RB ( makepkg " " --syncdeps ) '
complete -c aur -f -n "__fish_seen_subcommand_from build" -s A -l ignorearch -d 'Ignore a missing or incomplete  arch field in the build script'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s L -l log -d 'Enable logging to a text file in the build directory'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s C -l clean -d 'Clean up leftover work files and directories after a successful build'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l buildscript -d 'Read the package script  NAME instead of the  PKGBUILD default'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s v -l verify -d 'Verify the PGP signature of the database before updating'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s R -l remove -d 'Remove old package files from disk when updating their entry in the database'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l new -d 'Only add packages that are not already in the database'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l bind -d or
complete -c aur -f -n "__fish_seen_subcommand_from build" -l temp -d 'will append these options to aur-chroot '
complete -c aur -f -n "__fish_seen_subcommand_from build" -l noextract -d 'option is added to the default makepkg (8) options.  The'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l margs -d '(comma-separated)'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l prevent-downgrade -d 'Do not add packages to the database if a newer version is already present'
complete -c aur -f -n "__fish_seen_subcommand_from build" -s o
complete -c aur -f -n "__fish_seen_subcommand_from build" -l batch
complete -c aur -f -n "__fish_seen_subcommand_from build" -l detach-sign -d and
complete -c aur -f -n "__fish_seen_subcommand_from build" -l no-armor -d 'must be supported by this command'
complete -c aur -f -n "__fish_seen_subcommand_from build" -l nosync -d or
complete -c aur -f -n "__fish_seen_subcommand_from build" -l auto-key-retrieve -d 'in gpg (1) for details'

# aur-chroot
# Autogenerated from man page /usr/share/man/man1/aur-chroot.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s D -l directory -d 'The base directory for containers'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s C -l pacman-conf -d 'The  pacman. conf (5) file used inside the container'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s M -l makepkg-conf -d 'The  makepkg. conf (5) file used inside the container'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l cargs -l makechrootpkg-args -d 'Arguments (comma-separated) to be passed to  makechrootpkg for   --build '
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l margs -l makepkg-args -d 'Additional (comma-separated)  makepkg  arguments for  makechrootpkg '
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l bind -d 'Bind a directory read-only to the container. RB ( makechrootpkg " " -D ) '
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l bind-rw -d 'Bind a directory read-write to the container. RB ( makechrootpkg " " -d ) '
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l checkpkg -d 'Run  checkpkg (1) on the built package'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s N -l namcap -d 'Run  namcap (1) on the built package'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s T -l temp -d 'Build in a temporary container'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s B -l build -d 'Build a package inside the container with makechrootpkg .  Assumes'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l create -d 'was run at least once'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s U -l update -d 'Update or create the /root copy of the container with arch-nspawn '
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l path -d 'Print the path to the container template ( $directory/root )'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l suffix -d 'option.  The component <machine> is taken from uname -m '
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -l user -d 'Run the host makepkg (8) instance as the specified user.  (makechrootpkg -U)'
complete -c aur -f -n "__fish_seen_subcommand_from chroot" -s d -d respectively

# aur-depends
# Autogenerated from man page /usr/share/man/man1/aur-depends.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from depends" -s a -l all -l show-all -d 'Include direct  pacman (8) dependencies of dependencies in the output'
complete -c aur -f -n "__fish_seen_subcommand_from depends" -s n -l pkgname -d 'Print dependency information to stdout as  pkgname instead of  pkgbase '
complete -c aur -f -n "__fish_seen_subcommand_from depends" -s t -l table -d 'Print dependency information in the following format:'
complete -c aur -f -n "__fish_seen_subcommand_from depends" -s r -l reverse -d 'Print  \\%dependstpkgbase pairs as input for  tsort (1)'
complete -c aur -f -n "__fish_seen_subcommand_from depends" -s J -l json -d 'Print dependency information as JSON'
complete -c aur -f -n "__fish_seen_subcommand_from depends" -l jsonl -d 'Print dependency information as JSON Lines (newline delimited JSON)'
complete -c aur -f -n "__fish_seen_subcommand_from depends" -l optdepends -d option
complete -c aur -f -n "__fish_seen_subcommand_from depends" -l no-depends
complete -c aur -f -n "__fish_seen_subcommand_from depends" -l no-makedepends -d and
complete -c aur -f -n "__fish_seen_subcommand_from depends" -l no-checkdepends -d options
complete -c aur -f -n "__fish_seen_subcommand_from depends" -l no-provides -d option
complete -c aur -f -n "__fish_seen_subcommand_from depends" -l assume-installed -d 'option.  Multiple packages can be specified by separating them with a comma'

# aur-fetch
# Autogenerated from man page /usr/share/man/man1/aur-fetch.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l sync -l merge -d 'Run  git-fetch (1) and merge upstream changes with  git-merge (1)'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l rebase -d 'Run  git-rebase (1) instead of  git-merge (1), re-applying local commits on t…'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l auto -d 'Run  git-rebase (1) for a repository with  aurutils'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l reset -d 'Retrieve new revisions with  git-fetch origin and  git-reset to the  master@{…'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l discard -d 'When using  --sync=merge or  --sync=rebase , uncommitted changes may cause th…'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l existing -d 'Check if a git repositories exist in AUR using  git-ls-remote (1) before retr…'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -s r -l recurse -d 'Download packages and their dependencies with  aur-depends (1)'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l results -d 'Write colon-delimited output in the following form to R FILE :'
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l ff
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l ff-only
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l no-commit -d and
complete -c aur -f -n "__fish_seen_subcommand_from fetch" -l no-ff -d 'options to git-merge .  Note: When previewing changes with'

# aur-format
# Autogenerated from man page /usr/share/man/man1/aur-format.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from format" -s f -l format -d 'The character  % is followed by one of the following flags, corresponding to …'
complete -c aur -f -n "__fish_seen_subcommand_from format" -s d -l delim -d 'The delimiter for expanding arrays.  Defaults to a single space'
complete -c aur -f -n "__fish_seen_subcommand_from format" -l gron -d 'Format output similar to  gron (1)'
complete -c aur -f -n "__fish_seen_subcommand_from format" -s v -l verbose -d 'If a field is empty, replace it with a hyphen'

# aur-graph
# Autogenerated from man page /usr/share/man/man1/aur-graph.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from graph" -s v -d 'parameter.  Every option requires a single'

# aur-pkglist
# Autogenerated from man page /usr/share/man/man1/aur-pkglist.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s b -l pkgbase -d 'Retrieve  pkgbases. git/pkgbase. json '
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s n -l pkgname -d 'Retrieve  pkgnames. git/pkgname. json .  This is the default'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -l users -d 'Retrieve  users. git/users. json '
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s i -l info -d 'Retrieve  metadata. git/pkgname. json '
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -l plain -d 'Print the package list to standard output'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s F -l fixed-strings -d 'Interpret the given  pattern as a list of fixed strings, separated by newline…'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s P -l perl-regexp -d 'Interpret the given  pattern as a Perl-compatible regular expression (PCRE)'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s q -s u -l quiet -d 'Update the package list and print its path to standard output'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s Q -l systime -d 'Use the system clock when verifying the list modification date (see  --time )'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s t -l ttl -d 'A positive integer specifying the delay in seconds for retrieving list upgrad…'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -l time -d 'This option should only be used when the clock is synchronized, for example w…'
complete -c aur -f -n "__fish_seen_subcommand_from pkglist" -s v -l verify -d 'Verify checksums of the compressed list with sha256sum (1)'

# aur-query
# Autogenerated from man page /usr/share/man/man1/aur-query.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from query" -s b -l by -d 'Arguments for package search . RB ( --type=search )'
complete -c aur -f -n "__fish_seen_subcommand_from query" -s t -l type -d 'Type of request.  Can be one of search , info , or suggest '
complete -c aur -f -n "__fish_seen_subcommand_from query" -s A -o fgLsSq

# aur-repo-filter
# Autogenerated from man page /usr/share/man/man1/aur-repo-filter.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from repo-filter" -s a -l all -l sync -d 'Query all available pacman repositories. RB ( "pacsift " --sync ) '
complete -c aur -f -n "__fish_seen_subcommand_from repo-filter" -s d -l database -d 'Restrict output to the pacman repository R NAME '
complete -c aur -f -n "__fish_seen_subcommand_from repo-filter" -l sysroot -d 'Set an alternate system root.  See  pacutils-sysroot (7)'
complete -c aur -f -n "__fish_seen_subcommand_from repo-filter" -l config -d 'Set an alternate pacman. conf (5) file path'

# aur-repo
# Autogenerated from man page /usr/share/man/man1/aur-repo.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s c -l config -d 'Specify an alternate  pacman (8) configuration file'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s d -l database -d 'The name of a  pacman (8) repository'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s r -l root -d 'The path to the root of a local   pacman (8) repository'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l delim -d 'The delimiter for expanding arrays with  --format '
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s s -l search -d 'Limit results to matches specified by R PATTERN '
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l search-by -d 'The field (see  --attr ) matched on with  --search .  Defaults to  name '
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s a -l all -d 'Use  "aur-vercmp --all" when checking for upgrades.  Implies  --upgrades '
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s q -l quiet -d 'Only print package names when listing the repository '
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l status -d 'Print status information to a standard output, in the following format: repo:…'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s f -l format -d 'Transform the contents of the local repository with aur-format (1)'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s F -l field -d 'List the attribute FIELD for all packages in the local repository'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s l -l list -d 'List the contents of a local repository in the following format: pkgname \\t p…'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l list-field -d 'List valid fields in a local repository generated by repo-add (1).  See'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l list-path -d 'List the paths of configured local repositories'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l path -d 'List the resolved path of the selected pacman (8) repository'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l list-repo -d 'List the names of configured local repositories'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s t -l table -d 'List the contents of a local repository in the following format: pkgname \\t d…'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s u -l upgrades -d 'Check package updates with aur-vercmp (1)'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s J -l json -d 'Output repository contents as JSON.  ( aur-repo-parse --json )'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l jsonl -d 'Output repository contents as JSON Lines.  ( aur-repo-parse --jsonl )'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l sync
complete -c aur -f -n "__fish_seen_subcommand_from repo" -l attr -d 'matched on with'
complete -c aur -f -n "__fish_seen_subcommand_from repo" -s S -d 'Query repositories in DBPATH /sync (defaults to /var/lib/pacman/sync ) instea…'

# aur-search
# Autogenerated from man page /usr/share/man/man1/aur-search.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from search" -s a -l any -d 'Show the union of results instead of the intersection'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s s -l search -d 'Use the  searchby interface.  This is the default'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s i -l info -d 'Use the  info interface'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s q -l short -d 'Only display package name, version and description'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s r -l json -l raw -d 'Display results as JSON'
complete -c aur -f -n "__fish_seen_subcommand_from search" -l format-stdin -d 'Format JSON from standard input, assumed to match  aur-format (1) output'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s v -l verbose -d 'Display more package information'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s k -l key -d 'Sort results via a key, defaulting to R Name '
complete -c aur -f -n "__fish_seen_subcommand_from search" -s d -l desc -d 'Search by package name and description'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s m -l maintainer -d 'Search by package maintainer'
complete -c aur -f -n "__fish_seen_subcommand_from search" -l submitter -d 'Search by package submitter'
complete -c aur -f -n "__fish_seen_subcommand_from search" -s n -l name -d 'Search by package name'
complete -c aur -f -n "__fish_seen_subcommand_from search" -l depends -l makedepends -l optdepends -l checkdepends -l provides -l conflicts -l replaces -l groups -l comaintainers -d 'Search for packages with keywords in depends , makedepends , optdepends , che…'

# aur-srcver
# Autogenerated from man page /usr/share/man/man1/aur-srcver.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -s a -l arg-file -d 'Read source directories from  FILE instead of the command-line'
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -l buildscript -d 'Read the package script  NAME instead of the  PKGBUILD default'
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -l noprepare -l no-prepare -d 'Do not run the prepare() function in the PKGBUILD'
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -s j -l jobs -d 'Set the amount of  makepkg processes run in parallel'
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -l margs -l makepkg-args -d 'Additional arguments to pass to  makepkg (8)'
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -l null -d 'When reading arguments with'
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -l nobuild
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -l nodeps -d and
complete -c aur -f -n "__fish_seen_subcommand_from srcver" -l skipinteg

# aur-vercmp
# Autogenerated from man page /usr/share/man/man1/aur-vercmp.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from vercmp" -s a -l all -d 'Show packages with an older or equal version in the AUR'
complete -c aur -f -n "__fish_seen_subcommand_from vercmp" -s c -l current -d 'Changes format to print packages with an equal or newer version to  stdout '
complete -c aur -f -n "__fish_seen_subcommand_from vercmp" -s p -l path -d 'Read package versions from FILE instead of the AUR'
complete -c aur -f -n "__fish_seen_subcommand_from vercmp" -s q -l quiet -d 'Only print package names to standard output'
complete -c aur -f -n "__fish_seen_subcommand_from vercmp" -s u -l upair -d 'Print unpairable lines from file FILENUM, where FILENUM is 1 or 2 (join -a)'

# aur-view
# Autogenerated from man page /usr/share/man/man1/aur-view.1.gz
complete -c aur -f -n "__fish_seen_subcommand_from view" -l format -d 'Can be one of  diff or  log , to generate diffs with  git-diff (1) and  git-l…'
complete -c aur -f -n "__fish_seen_subcommand_from view" -l no-patch -d 'Suppress patch output, only showing a summary'
complete -c aur -f -n "__fish_seen_subcommand_from view" -l revision -d 'The revision used for comparing changes.  Defaults to R HEAD '
complete -c aur -f -n "__fish_seen_subcommand_from view" -l prefix -d 'Prepend paths from command-line arguments or  --arg-file to  git-diff (1) and…'
complete -c aur -f -n "__fish_seen_subcommand_from view" -l arg-file -d 'to git-diff (1) and git-log (1) output'
complete -c aur -f -n "__fish_seen_subcommand_from view" -s a -d 'A textfile describing git repositories relative to the current directory'

# custom scripts
complete -c aur -f -n "__fish_seen_subcommand_from install" -l continue -d 'Do not download package files'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l ignore -d 'Ignore a package upgrade'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l ignore-file -d 'Ignore package upgrades listed in R FILE '
complete -c aur -f -n "__fish_seen_subcommand_from install" -s k -l keep-going -d 'Keep going until  NUM packages fail to build . RB ( "ninja -k" )'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l noview -l no-view -d 'Do not present build files for inspection'
complete -c aur -f -n "__fish_seen_subcommand_from install" -s u -l upgrades -d 'Update all obsolete AUR packages in a local repository'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l optdepends -d 'Take  optdepends into account when resolving dependencies'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l nocheck -l no-check -d 'Do not handle  checkdepends '
complete -c aur -f -n "__fish_seen_subcommand_from install" -l nograph -l no-graph -d 'Do not verify the AUR dependency graph with  aur-graph (1)'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l nover -l no-ver -d 'Disable version checking for packages'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l nover-argv -l no-ver-argv -d 'Disable version checking for packages specified on the command line  or  upgrade  candidates  from  --upgrades.  Version checks for package dependencies remain enabled.'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l noprovides -l no-provides -d 'Do not take virtual dependencies '
complete -c aur -f -n "__fish_seen_subcommand_from install" -l provides-from -d 'Only take specified (comma-separated) pacman(8) repositories into account when checking virtual dependencies. If the same package is provided in multiple repositories, ordering is ignored (for example,  --provides-from=a,b  is equivalent to --provides-from=b,a) and dependencies are installed according to the order defined in pacman.conf(5).  Packages specified  on  the  command-line  or  available  as  an  upgrade (aur-sync -u), are taken as targets regardless of this setting.'
complete -c aur -f -n "__fish_seen_subcommand_from install" -s d -l database -d 'Use the  NAME repository'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l root -d 'The location of the repository root'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l ff -d 'Merge new AUR commits with  "git-merge --ff" for all repositories'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l rebase -d 'Merge new AUR commits with  "git-rebase" for all repositories'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l reset -d 'Discard local changes and commits with  "git-reset" for all repositories'
complete -c aur -f -n "__fish_seen_subcommand_from install" -s c -l chroot -d 'Build packages in a systemd-nspawn container. RB ( "aur build -c" ) '
complete -c aur -f -n "__fish_seen_subcommand_from install" -s f -l force -d 'Continue the build process if a package with the same name exists'
complete -c aur -f -n "__fish_seen_subcommand_from install" -s n -l noconfirm -l no-confirm -d 'Do not wait for user input when installing or removing build dependencies'
complete -c aur -f -n "__fish_seen_subcommand_from install" -s o -l nobuild -l no-build -d 'Print target packages and their paths instead of building them'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l pkgver -d 'Run  "makepkg -od --noprepare" before the build process'
complete -c aur -f -n "__fish_seen_subcommand_from install" -s r -l rmdeps -l rm-deps -d 'Remove dependencies installed by makepkg. RB ( "aur build -r" ) '
complete -c aur -f -n "__fish_seen_subcommand_from install" -s S -l sign -l gpg-sign -d 'Sign built packages with  gpg (1). RB ( "aur build -S" ) '
complete -c aur -f -n "__fish_seen_subcommand_from install" -l makepkg-conf -d 'The  makepkg. conf (5) file for chroot and  makepkg (8) operations'
complete -c aur -f -n "__fish_seen_subcommand_from install" -l pacman-conf -d 'The pacman. conf (5) file for chroot and local repository operations'

complete -c aur -f -n '__fish_seen_subcommand_from install' -a (cat '/home/still/.cache/aurutils/pkglist/packages' | tr '\n' ' ')

complete -c aur -f -n '__fish_seen_subcommand_from remove' -a (paclist custom | cut -d ' ' -f1 | tr '\n' ' ')
